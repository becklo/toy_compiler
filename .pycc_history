iuhijugh
;
float Global_Float = 3*5-(36/6);
;
;;;;;
3
3;
3
3 ; 3
3 ; 3 ;
3 ; 3
3 ;
3 ; ;
{3 ; ;}
{}
{3}
{3;}
{3;3}
{3;3};
3*5-(36/6)
3*5-(36/6);
n++;
n--;
one() < two() and { 5*6 >= 4*6}
one() < two() 
one() < two() and { 5*6 >= 4*6}
one() < two() 
one() < two() and { 5*6 >= 4*6}
one() < two() and 3
a and b
a and b ;
a and b 
one() < two() and true
true;
one() < two() and true
two() and true
a and b
a and b;
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
include ModuleNameSomewhere # this should act like a C include, we will ignore it initially and implement it later
include ModuleNameSomewhere 
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
declare int external_function1(); declare int external_function2(int a, int b); declare int printf(str text,...); # variable argument
{float Global_Float = 3*5-(36/6);
{float Global_Float = 3*5-(36/6);}
float Global_Float = 3*5-(36/6);
d
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int one() 1; # here we have implicit return of 1
int one() {1}; # here we have implicit return of 1
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n # this is going to be our return value}
 printf("Hello world %s\n", Global_str);
 printf("Hello world %s\n", Global_str)
 printf("Hello world %s\n");
 printf("Hello world %s\n", a);
 printf("Hello world %s\n", Global_str);
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n # this is going to be our return value}
int n = { -5};
int n =  -5;
while (n<0) n++; n # this is going to be our return value
 if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}
 if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);};
 if (something(2.1*5) > 0) { int a};
 if (something(2.1*5) > 0) { };
 if (something(2.1*5) > 0);
 if (something(2.1*5) > 0) 1;
 if (something(2.1*5) > 0) {
 if (something(2.1*5) > 0) 1;
 if (something(2.1*5) > 0) { int a};
 if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);};
int n = { -5};
while (n<0) n++; n # this is going to be our return value
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n # this is going to be our return value}
int main() { a}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}while (n<0) n++; n # this is going to be our return value}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);} n # this is going to be our return value}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);} n; # this is going to be our return value}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}  # this is going to be our return value}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);} }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}while (n<0) n++; n }
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6})
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { a}
 if (one() < two() and { 5*6 >= 4*6})
 if (one() < two() )
int something(float b) { if (one() < two())}
int something(float b){ if (one() < two()) 1}
int something(float b){ if (one() < two() and 2) 1}
int something(float b){ if (one() < two() and {2}) 1}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}
# This is a comment until the end of the line 
== n
++ n;
i ()
while ( 2>b ) { b() - a++; };
while ( 2>b ) { b() - a++; }; # slkijaslksjdas

# This is a comment until the end of the line 
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
nt main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n # this is going to be our return value}
nt main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n }
nt main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n # this is going to be our return value}
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n }
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
float Global_Float = 3*5;
float Global_Float = 3;
float Global_Float = 3 * 5;
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n }
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1};}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) 1;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) 1}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = { -5};while (n<0) n++; n }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}int n = { -5};while (n<0) n++; n }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)} int n = { -5} }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)} int n = { -5}; }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)} int n = { -5} }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}int n = { -5};while (n<0) n++; n }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
while (n<0) n++;
while (n<0) n++
int main() { while (n<0) n++; n }
int main() { while (n<0) n++; n ;}
int main() { while (n<0) n++; n }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}int n = { -5};while (n<0) n++; n }
int n = { -5};
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}}
int something(float b) { }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) 1}
int something(float b) { if (one() < two()) 1}
int something(float b) { if (one() < two() and { 5}) 1}
int something(float b) { if (one() < two() and 2) 1}
int something(float b) { if (one() < two() and {2}) 1}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) 1}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (onrn 1}; return 2}
int something(float b) {  1 ; return 2}
int something(float b) {  1 ; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}int n = { -5};while (n<0) n++; n }
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)}int n = { -5};while (n<0) n++; n }}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str)} int n = { -5};while (n<0) n++; n }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
;;;;
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { return 2}
int something(float b) { ;return 2}
int something(float b) { a;return 2}
int something(float b) { ; }
int something(float b) { a; }
int something(float b) { a;;a }
int something(float b) { a;; }
int something(float b) { a; }
int something(float b) { a;a }
a
a;
;
a;
;
a;
a;a
a;b
a;b;
a;b;;;
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
{ 5*6 >= 4*6}) { return 1}; ret
{ 5*6 >= 4*6}
int f() {a;} 
int f() {if (a) {a;}}  
int f() {if (a) a;}  
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int something(float b) { if (1) {} }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1};; return 2;}
...
a, b , ...
a , ...
()
(a,b)
(a, a)
(a)
(int a)
(int a, float b)
(int a, float b, ...)
(int a, ..., float b)
(...)
while ( true) { 
while ( true) { 1}
while ( true) { 1;}
while ( true) { 1;};
while ( true) { a = 1;}
while ( true) { a = 1}
while ( true) { a = 1; b= "e"}
git status 
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) if (n < 2) 1 else {fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int fibonacci(int n) if (n < 2) 1 else {fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int a int b
int a =3  int b
;;;;
;
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) if (n < 2){ 1} else {fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1} }
int something(float b) { if (one() < two() and { 5*6 >= 4*6})   return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6})   return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) 2}
int something(float b) { if (one() < two())   return 2;}
int something(float b) { if (one() < two()) 2;}
int something(float b) { if (one() < two())   return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
while (n<0) n++; n # this is going to be our return value
while (n<0) n++ # this is going to be our return value
while (n<0) n++ ;
while (n<0) n++ 
n++
while (n<0) n++
while (n<0) n++ # this is going to be our return value
int something(float b) { while (n<0) n++}
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) if (n < 2) 1 else {fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int fibonacci(int n) {if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int fibonacci(int n) if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2) # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; }
int something(float b) { if (one() < two() ) { return 1}; return 2}
int something(float b) { if (one() < two() ) { return 1};}
int something(float b) { if (one() < two() ) { return 1}; 1}
int something(float b) { if (one() < two() ) { return 1}; 1;}
int something(float b) { 1; 1;}
int something(float b) { 1; 1}
int something(float b) { ;;;;}
int something(float b) { ;}
int something(float b) { 1;}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2}
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; }
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}}
int something(float b) { if (one() < two() ) { return 1}; 1}
int something(float b) { if (one() < two() ) { return 1}; return 2}
int something(float b) { if (one() < two() ) {1}; }
int something(float b) { if (one() < two() ) {return 1}; }
int something(float b) { if (one() < two() and 1 ) {return 1}; }
int something(float b) { if (one() < two() and {1}) {return 1}; }
int something(float b) { if (one() < two() and {5*6 >= 4*6}) {return 1}; }
int something(float b) { if (one() < two() and {5*6}) {return 1}; }
int something(float b) { if (one() < two() and {5*6 >= 1}) {return 1}; }
int something(float b) { if (one() < two() and {5 >= 1}) {return 1}; }
int something(float b) { if (5 >= 1) {return 1}; }
int something(float b) { if (5*2 >= 1) {return 1}; }
int something(float b) { if (5*2 >= 1*2) {return 1}; }
int something(float b) { if ({5 >= 1}) {return 1}; }
int something(float b) { if ({1}) {return 1}; }
int something(float b) { if ({1 > 9}) {return 1}; }
int something(float b) { if (1 > 9) {return 1}; }
int something(float b) { if ({1}) {return 1}; }
int something(float b) { if ({1*3}) {return 1}; }
int something(float b) { if ({1*3 == 2}) {return 1}; }
int something(float b) { if ({1*3 + 2}) {return 1}; }
int something(float b) { if (1*3 + 2) {return 1}; }
int something(float b) { if ({1}) {return 1}; }
int something(float b) { if (1) {return 1}; }
int something(float b) { if (1 and {1}) {return 1}; }
int something(float b) { if (1 and 1) {return 1}; }
int something(float b) { if (1 and (1)) {return 1}; }
int something(float b) { if (one() < two() ) { return 1}; return 2}
int something(float b) { if (one() < two()) { return 1}; return 2;}
int something(float b) { if (one() < two()) { return 1};}
int something(float b) { if (one() < two()) { return 1}; 1}
int something(float b) { if (one() < two()) { return 1};; 1}
int something(float b) { if (one() < two()) { return 1}; 1}
int something(float b) { if (one() < two()) { return 1}; return 2;}
int something(float b) { if (one() < two()) { return 1}; return 2}
int f() { 4 --1 } 
int a =3 int b=3 
int a =1--3 int b=3 
int a =1--3 
include ModuleNameSomewhere; # this should act like a C include, we will ignore it initially and implement it later
int Global_Variable;
float Global_Float = 3*5-(36/6);
float Global_Float = 3*5-36/6;
str Global_str = "String content\n";
declare int external_function1();
declare int external_function2(int a, int b);
declare int printf(str text,...); # variable argument
int fibonacci(int n){ if (n < 2) 1 else fibonacci(n-1)+fibonacci(n-2)} # remember if is an expression now so it returns a value, and the latest value in scope is also a return statement so this is implicit return. Also we do not have a scope block because we have defined a function to have an expression, while in expression we can have many scope blocks
int one() 1; # here we have implicit return of 1
int two() return 2; # here we have explicit return of 2
int something(float b) { if (one() < two() and { 5*6 >= 4*6}) { return 1}; return 2;}
int something(float b) { if (one() < two() and 5*6 >= 4*6) { return 1}; return 2;}
int something(float b) { if (one() < two() ) { return 1}; return 2;}
int something(float b) { if (one() < two() and 1) { return 1}; return 2;}
int something(float b) { if (one() < two() and 1*2) { return 1}; return 2;}
int something(float b) { if (one() < two() and 1>2) { return 1}; return 2;}
int something(float b) { if (one() < two() and true ) { return 1}; return 2;}
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = 5;while (n<0) n++; n } # this is going to be our return value
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}int n = 5; n } # this is going to be our return value
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);} } # this is going to be our return value
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);}; } # this is going to be our return value
int main() { if (something(2.1*5) > 0) { printf("Hello world %s\n", Global_str);};int n = 5;while (n<0) n++; n } # this is going to be our return value
1 + 3 *4 
1++
i++
i + 1
global_i + 1
f() + 1
f(a) + 1
f() + 1
f(a) + 1
f(1) + 1
1+1
int a = 2 ; a +1
int a = 2 ; a + 1;
int f(int a) return a; f(1) + 1
int f(int a) {return a}; f(1) + 1
int f(int a) {1}; f(1) + 1
int f(int a) {1;}; f(1) + 1
int f(int a){1;}
int f(int a){1;}; 1
int f(int a){1;}; int a = 1
int f(int a){1;}; f(1)
int main() {int f(int a){1;}; f(1)}
int main() {int f(int a){1;}; f(1);}
int main(){1}
int main(){main()}
int main(){}
int main(){int f(int q) 1 ; 1}
int main(){int f(int q) 1 ;}
int main(){int f(int q) 1}
int main(){int f(int q) {1}}
int main(){int f(int q)}
int main(){int f()}
int main(){int f();}
int main(){int a;}
int main(int a){main(1)}
int main(){int a;}
int main(){main()}
int main(int a){main(1)}
int a = 2 ; a + 1;
int a = 2 ; a + 1
int a = 2 ; a + 1;
int a = 2  a + 1;
int a = 2 ; a + 1;
int main(){int a = 2 ; a + 1;}
int main(){int a = 2; int b ; a + 1;}
int main(int a){main(1)}
int main(int a, int b){main(1)}
int main(int a, int b){main(1,2)}
int main(int a, float b){main(1,2.0)}
int main(){main()}
int main(){1}
int main(int a, int b){main(1,2)}
int main(){main()}
int main(){if(1==1){main()}}
int main(){if(1==1){main()};}
int main(){if(1){main()};}
int main(){if(1==1){main()};}
int main(int a, int b){main(1,2)}
int main(){if(1==1){main()};}
int main(){if(1==1){2};}
int main(){if(1==1){2} else 1;}
int main(){1+1;}
int main(){main()}
int main(){if(1==1){2} else 1;}
int main(int a, int b){main(1,2)}
int main(){int a = 2; int b ; a + 1;}
int main(){ 1;}
int main(){int a = 2; int b ; a + 1;}
int main(int a, int b){main(1,2)}
int main(){int a = 2; int b ; a + 1;}
int main(){ 1;}
int main(){;}
int main(){}
int main(){if(1!=1){2} else 1;}
int main(){if(1!=1){2} else 1}
int main(){if(1!=1)2 else 1}
int main(){if(1!=1) {2}; else 1}
int main(){if(1!=1) {2} else {1}}
int main(){if(1 != 1) {2} else {1}}
int main(){if(1 > 1) {2} else {1}}
int main(){if(1 != 1) {2} else {1}}
int main(){if(1 == 1) {2} else {1}}
int main(){if(1 >= 1) {2} else {1}}
int main(){if(1 == 1) {2} else {1}}
int main(){if(1 != 1) {2} else {1}}
int main(){if(1 >= 1) {2} else {1}}
int main(){ 1;}
int main(){int a = 2; int b ; a + 1;}
int main(int a, int b){main(1,2)}
int main(){if(1==1){2};}
int main(int a, int b){main(1,2)}
int main(){if(1==1){2};}
int main(int a, int b){main(1,2)}
int main(){if(1==1){2};}
int main(int a, int b){main(1,2)}
int main(){int a = 2; int b ; a + 1;}
int main(){ 1;}
int main(){if(1>=1){2};}
int main(){if(1>1){2};}
int main(){if(1<1){2};}
int main(){if(1<=1){2};}
int main(){if(1!=1){2};}
int main(){if(1==1){2};}
int main(){if(1!=1){2};}
1
1+1
int main(){1+1}
int main(){1+2}
int main(){2+1}
int main(){2+1;}
int main(){int a = 2; int a ; a + 1;}
int main(){int a = 2; int a =3 ; a + 1;}
int main(){int a = 2; int a ; a + 1;}
int main(){int a = 2; int b ; a + 1;}
int main(){int a; a= 1;}
int main(){for(int i = 0; i<2; i =2){1}}
int main(){for(int i = 0; i<2; 2){1}}
int main(){for(1; i<2; 2){1}}
int main(){for(1; 1<2; 2){1}}
int main(){}
=
!
!=
=
not
NOT
!
!=
!asd
!=asd
=
int main(){for(int a =0; a<3; 3){1}}
int main(){for(1; 1<2; 2){1}}
int main(){for(){1}}
int main(){if(1!=1){2};}
int main(){if(1 and 0){2};}
int main(){1 and 0}
int main(){1 or 0}
int main(){1 and 0}
int main(){1 or 0}
int main(){1 and 1}
int main(){0 or 0}
int main(){int a =1; a or 0}
int main(){int a =1; a ans 0}
d
int main(){int a =1; a and 0}
int main(){true and 0}
int main(){true and false}
int main(){true and true}
int main(){int a =1; a and 0}
int main(){int a =1; a++}
int main(){int a =1; a++; a}
int main(){int a =1; ++a}
int main(){int a =1; --a}
int main(){int a =1; a--}
int main(){int a =1; a and 0}
int main(){int a =1; a and 1}
int main(){int a =1; 1 and a}
int main(){int a =0; 1 and a}
int main(){int a =0; true and a}
int main(){int a =0; false and a}
int main(){int a =0; a and false}
int main(){int a =0; a and true}
int main(){int a =0; a or true}
int main(){int a =1; a or true}
int main(){int a =true; a and 0}
int main(){int a = true}
int main(){int a ; a = true}
int main(){int a = true}
true
;
int main(){int a = true}
int main(){int a =true; a and 0}
int main(){int a =true; a and 1}
int main(){int a = false; a and 1}
int main(){int a = false; a and 0}
int main(){int a = false; 0 and a}
int main(){int a = true; 0 and a}
int main(){int a ; a = true}
int main(){for(){1}}
int main(){for(1; 1<2; 2){1}}
int main(){for(int i=0; i<2; i++){1}}
int main(){for(int i; i<2; i++){1}}
int main(){for(i; i<2; i++){1}}
int main(){int i = 0}
int main(){for(i; i<2; i++){1}}
int main(){for(int i=0; i<2; i++){1}}
